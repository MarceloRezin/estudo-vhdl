// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"

// DATE "10/26/2019 10:49:48"

// 
// Device: Altera 10M08DAF484C8G Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module somador (
	a,
	b,
	z);
input 	[3:0] a;
input 	[3:0] b;
output 	[3:0] z;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \z[0]~output_o ;
wire \z[1]~output_o ;
wire \z[2]~output_o ;
wire \z[3]~output_o ;
wire \b[0]~input_o ;
wire \a[0]~input_o ;
wire \Add0~0_combout ;
wire \b[1]~input_o ;
wire \a[1]~input_o ;
wire \Add0~1 ;
wire \Add0~2_combout ;
wire \b[2]~input_o ;
wire \a[2]~input_o ;
wire \Add0~3 ;
wire \Add0~4_combout ;
wire \b[3]~input_o ;
wire \a[3]~input_o ;
wire \Add0~5 ;
wire \Add0~6_combout ;


fiftyfivenm_io_obuf \z[0]~output (
	.i(\Add0~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\z[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \z[0]~output .bus_hold = "false";
defparam \z[0]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \z[1]~output (
	.i(\Add0~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\z[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \z[1]~output .bus_hold = "false";
defparam \z[1]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \z[2]~output (
	.i(\Add0~4_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\z[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \z[2]~output .bus_hold = "false";
defparam \z[2]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \z[3]~output (
	.i(\Add0~6_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\z[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \z[3]~output .bus_hold = "false";
defparam \z[3]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_ibuf \b[0]~input (
	.i(b[0]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\b[0]~input_o ));
// synopsys translate_off
defparam \b[0]~input .bus_hold = "false";
defparam \b[0]~input .listen_to_nsleep_signal = "false";
defparam \b[0]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \a[0]~input (
	.i(a[0]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\a[0]~input_o ));
// synopsys translate_off
defparam \a[0]~input .bus_hold = "false";
defparam \a[0]~input .listen_to_nsleep_signal = "false";
defparam \a[0]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_lcell_comb \Add0~0 (
// Equation(s):
// \Add0~0_combout  = (\b[0]~input_o  & (\a[0]~input_o  $ (VCC))) # (!\b[0]~input_o  & (\a[0]~input_o  & VCC))
// \Add0~1  = CARRY((\b[0]~input_o  & \a[0]~input_o ))

	.dataa(\b[0]~input_o ),
	.datab(\a[0]~input_o ),
	.datac(gnd),
	.datad(vcc),
	.cin(gnd),
	.combout(\Add0~0_combout ),
	.cout(\Add0~1 ));
// synopsys translate_off
defparam \Add0~0 .lut_mask = 16'h6688;
defparam \Add0~0 .sum_lutc_input = "datac";
// synopsys translate_on

fiftyfivenm_io_ibuf \b[1]~input (
	.i(b[1]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\b[1]~input_o ));
// synopsys translate_off
defparam \b[1]~input .bus_hold = "false";
defparam \b[1]~input .listen_to_nsleep_signal = "false";
defparam \b[1]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \a[1]~input (
	.i(a[1]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\a[1]~input_o ));
// synopsys translate_off
defparam \a[1]~input .bus_hold = "false";
defparam \a[1]~input .listen_to_nsleep_signal = "false";
defparam \a[1]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_lcell_comb \Add0~2 (
// Equation(s):
// \Add0~2_combout  = (\b[1]~input_o  & ((\a[1]~input_o  & (\Add0~1  & VCC)) # (!\a[1]~input_o  & (!\Add0~1 )))) # (!\b[1]~input_o  & ((\a[1]~input_o  & (!\Add0~1 )) # (!\a[1]~input_o  & ((\Add0~1 ) # (GND)))))
// \Add0~3  = CARRY((\b[1]~input_o  & (!\a[1]~input_o  & !\Add0~1 )) # (!\b[1]~input_o  & ((!\Add0~1 ) # (!\a[1]~input_o ))))

	.dataa(\b[1]~input_o ),
	.datab(\a[1]~input_o ),
	.datac(gnd),
	.datad(vcc),
	.cin(\Add0~1 ),
	.combout(\Add0~2_combout ),
	.cout(\Add0~3 ));
// synopsys translate_off
defparam \Add0~2 .lut_mask = 16'h9617;
defparam \Add0~2 .sum_lutc_input = "cin";
// synopsys translate_on

fiftyfivenm_io_ibuf \b[2]~input (
	.i(b[2]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\b[2]~input_o ));
// synopsys translate_off
defparam \b[2]~input .bus_hold = "false";
defparam \b[2]~input .listen_to_nsleep_signal = "false";
defparam \b[2]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \a[2]~input (
	.i(a[2]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\a[2]~input_o ));
// synopsys translate_off
defparam \a[2]~input .bus_hold = "false";
defparam \a[2]~input .listen_to_nsleep_signal = "false";
defparam \a[2]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_lcell_comb \Add0~4 (
// Equation(s):
// \Add0~4_combout  = ((\b[2]~input_o  $ (\a[2]~input_o  $ (!\Add0~3 )))) # (GND)
// \Add0~5  = CARRY((\b[2]~input_o  & ((\a[2]~input_o ) # (!\Add0~3 ))) # (!\b[2]~input_o  & (\a[2]~input_o  & !\Add0~3 )))

	.dataa(\b[2]~input_o ),
	.datab(\a[2]~input_o ),
	.datac(gnd),
	.datad(vcc),
	.cin(\Add0~3 ),
	.combout(\Add0~4_combout ),
	.cout(\Add0~5 ));
// synopsys translate_off
defparam \Add0~4 .lut_mask = 16'h698E;
defparam \Add0~4 .sum_lutc_input = "cin";
// synopsys translate_on

fiftyfivenm_io_ibuf \b[3]~input (
	.i(b[3]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\b[3]~input_o ));
// synopsys translate_off
defparam \b[3]~input .bus_hold = "false";
defparam \b[3]~input .listen_to_nsleep_signal = "false";
defparam \b[3]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \a[3]~input (
	.i(a[3]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\a[3]~input_o ));
// synopsys translate_off
defparam \a[3]~input .bus_hold = "false";
defparam \a[3]~input .listen_to_nsleep_signal = "false";
defparam \a[3]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_lcell_comb \Add0~6 (
// Equation(s):
// \Add0~6_combout  = \b[3]~input_o  $ (\a[3]~input_o  $ (\Add0~5 ))

	.dataa(\b[3]~input_o ),
	.datab(\a[3]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(\Add0~5 ),
	.combout(\Add0~6_combout ),
	.cout());
// synopsys translate_off
defparam \Add0~6 .lut_mask = 16'h9696;
defparam \Add0~6 .sum_lutc_input = "cin";
// synopsys translate_on

assign z[0] = \z[0]~output_o ;

assign z[1] = \z[1]~output_o ;

assign z[2] = \z[2]~output_o ;

assign z[3] = \z[3]~output_o ;

endmodule
